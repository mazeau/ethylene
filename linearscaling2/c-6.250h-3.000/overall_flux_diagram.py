"""
This will draw an overall flux daigram
"""

# load a bunch of stuff
import cantera as ct
import numpy as np
import scipy
import pylab
import matplotlib
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec
from matplotlib.pyplot import cm
from matplotlib.ticker import NullFormatter, MaxNLocator, LogLocator
plt.switch_backend('agg')  # needed for saving figures
import csv
from pydas.dassl import DASSL
import os

import re
import operator
import pandas as pd
import pylab
from cycler import cycler
import seaborn as sns
import os
import multiprocessing
import sys
import rmg
import rmgpy

# this chemkin file is from the cti generated by rmg
gas = ct.Solution('./chem_annotated.cti', 'gas')
surf = ct.Interface('./chem_annotated.cti', 'surface1', [gas])

print("This mechanism contains {} gas reactions and {} surface reactions".format(gas.n_reactions, surf.n_reactions))

i_c2h4 = gas.species_index('C2H4(2)')
i_nheptane = gas.species_index('n-heptane')
i_c4h8_1 = gas.species_index('C4H8-1(3)')  # 1 butene
i_c4h8_2 = gas.species_index('C4H8-2(4)')  # 2 butene
# i_hx = gas.species_index('HX(5)')
# i_c6h12_1 = gas.species_index('C6H12-1(7)')
# i_c6h12_2 = gas.species_index('C6H12-2(8)')
# i_c6h12_3 = gas.species_index('C6H12-3(9)')
# i_c6h12_1_3 = gas.species_index('C6H12-1-3(10)')
# i_c6h12_2_3 = gas.species_index('C6H12-2-3(11)')

# unit conversion factors to SI
mm = 0.001
cm = 0.01
ms = mm
minute = 60.0

cat_area_per_vol = 5.9e8  # in m-1

species_dict = rmgpy.data.kinetics.KineticsLibrary().get_species('species_dictionary.txt')
keys = species_dict.keys()
# get the first listed smiles string for each molecule
smile = []
for s in species_dict:
    # treating HX separately because smiles translation drops the H
    if s == 'HX(5)':
        smile.append('H[Pt]')
        continue
    smile.append(species_dict[s].molecule[0])
    if len(species_dict[s].molecule) is not 1:
        print('There are %d dupllicate smiles for %s:' % (len(species_dict[s].molecule), s))
        for a in range(len(species_dict[s].molecule)):
            print('%s' % (species_dict[s].molecule[a]))

# translate the molecules from above into just smiles strings
smiles = []
for s in smile:
    try:
        smiles.append(s.to_smiles())
    except AttributeError:
        print("Cannot convert {} to SMILES, translating manually".format(s))
        smiles.append(s)
names = dict(zip(keys, smiles))

def semibatch(gas, surf, temp, pressure, volume, mol_in, verbose=False, sens=False):
    """

    :param gas: from cti
    :param surf: from cti
    :param temp: Kelvin
    :param pressure: Pa
    :param volume: m^3
    :param mol_in: ratio
    :param verbose:
    :param sens:
    :return:
    """

    overall_fluxes = {}

    def combine_fluxes(fluxes, time_delta):
        fluxes = fluxes.split('\n')
        fluxes = [x for x in fluxes if x != '']  # remove empty items
        fluxes.pop(0)  # remove all species from first entry

        for line in fluxes:
            s1,s2,f,r = line.split()
            key = names[s1] + ' ' + names[s2]  # replace simulation names with smiles

            if key in overall_fluxes:
                overall_fluxes[key] = overall_fluxes[key] + time_delta * (float(f) + float(r))  # multiply by delta t because each time step is different
            else:
                overall_fluxes[key] = time_delta * (float(f) + float(r))
        return overall_fluxes


    cat_area = cat_area_per_vol * volume

    c2h4, nh = mol_in
    c2h4 = str(c2h4)
    nh = str(nh)
    X = str('C2H4(2):' + c2h4 + ', n-heptane:' + nh)  # gas concentrations

    surf.TP = temp, pressure
    surf.coverages = 'X(1):1.0'

    # create an upstream reservoir that will supply the reactor. The temperature
    #  and pressure of the upstream reservoir of pure ethylene
    gas.TPX = temp, pressure, 'C2H4(2):1'
    upstream = ct.Reservoir(gas)

    # set the gas to the specified input concentrations
    gas.TPX = temp, pressure, X
    exhaust = ct.Reservoir(gas)

    # Now create the reactor object with a differnet initial state.  Turn energy off
    # so the temperature stays at its initial value
    r = ct.IdealGasReactor(gas, energy='off')

    # Set its volume. In this problem, the reactor volume is fixed, so
    # the initial volume is the volume at all later times.
    r.volume = volume

    # Add the reacting surface to the react or. The area is set to the desired
    # catalyst area in the reactor.
    rsurf = ct.ReactorSurface(surf, r, A=cat_area)

    # create a valve to feed in ethylene from the reservoir to the reactor if the pressure drops
    pressureRegulator = ct.Valve(upstream=upstream,
                                 downstream=r,
                                 K=1e-3)  # CVODES at 2e-2 when the second valve is on

    # trying to keep pressure from building up
    pressureRegulator2 = ct.Valve(upstream=r,
                                  downstream=exhaust,
                                  K=1e-4)

    sim = ct.ReactorNet([r])
    sim.max_err_test_fails = 12

    # set relative and absolute tolerances on the simulation
    sim.rtol = 1.0e-10
    sim.atol = 1.0e-20

    # rxn_time = np.linspace(1E-5, np.log10(3600), 1000001)  # from 0s to 3600s (1 hour)
    rxn_time = np.logspace(-5, np.log10(60), 1000001)  # from 0s to 3600s (1 hour), log spacing
    gas_mole_fracs = np.zeros([gas.n_species, len(rxn_time)])
    surf_site_fracs = np.zeros([surf.n_species, len(rxn_time)])
    p = np.zeros(len(rxn_time))
    temperature = np.zeros(len(rxn_time))
    v = np.zeros(len(rxn_time))

    if verbose is True:
        print('     time        X_C2H4       X_C4H8-1')

    surf.set_multiplier(1.0)
    if sens is not False:
        surf.set_multiplier(1.0 + sens[0], sens[1])
    for i in range(len(rxn_time)):
        time = rxn_time[i]  # define time in the reactor
        sim.advance(time)  # Advance the simulation to next set time
        # p[i] = gas.P / ct.one_atm
        p[i] = gas.P / 1e6  # MPa
        gas_mole_fracs[:, i] = gas.X
        surf_site_fracs[:, i] = surf.coverages
        temperature[i] = gas.T
        v[i] = r.volume

        if verbose is True:
            if not i % 10000:
                print('  {0:10f}  {1:10f} '.format(time, *gas[
                    'C2H4(2)', 'C4H8-1(3)'].X))

        if sens is False:
            diagram = ct.ReactionPathDiagram(surf, 'H')
            data = diagram.get_data()
            time_delta = time - rxn_time[i-1]
            combine_fluxes(data, time_delta)

        else:
            pass


    # check to see if the pressure stays the same throughout
    maxPressureRiseAllowed = 1e-2  # MPa
    pressureDifferential = np.amax(p) - np.amin(p)
    if abs(pressureDifferential) > maxPressureRiseAllowed:
        print("WARNING: Non-trivial pressure change of {0:3f} MPa in reactor!".format(pressureDifferential))

    surf.set_multiplier(1.0)  # resetting things, just incase sensitivity was running
    return gas_mole_fracs, surf_site_fracs, rxn_time, p, overall_fluxes


def plot(data, log=False):
    gas_mole_fracs, surf_site_fracs, rxn_time, pressure, fluxes = data

    #Plot out simulations results
    fig = pylab.figure(dpi=300, figsize=(12, 8))
    gs = gridspec.GridSpec(2, 1)
    ax0 = plt.subplot(gs[0])
    ax1 = plt.subplot(gs[1])

    y_min = 1E-2

    for i in range(gas.n_species):
        if np.max(gas_mole_fracs[i,:]) > y_min:
            if log is True:
                ax0.loglog(rxn_time, gas_mole_fracs[i, :], label=gas.species_name(i))
                ax0.set_xlim(1e-5, max(rxn_time))
                ax0.set_ylim(1e-4, 2)
            else:
                # ax0.semilogy(rxn_time, gas_mole_fracs[i,:], label=gas.species_name(i) )
                ax0.plot(rxn_time, gas_mole_fracs[i, :], label=gas.species_name(i))
                ax0.set_xlim(0., max(rxn_time))
                ax0.set_ylim(y_min, 1.1)

    for i in range(surf.n_species):
        if np.max(surf_site_fracs[i,:]) > y_min:
            if log is True:
                ax1.loglog(rxn_time, surf_site_fracs[i, :], label=surf.species_name(i))
                ax1.set_xlim(1e-5, max(rxn_time))
                ax1.set_ylim(1e-4, 2)
            else:
                # ax1.semilogy(rxn_time, surf_site_fracs[i,:], label=surf.species_name(i) )
                ax1.plot(rxn_time, surf_site_fracs[i, :], label=surf.species_name(i))
                ax1.set_xlim(0.,max(rxn_time))
                ax1.set_ylim(y_min, 1.1)

    # putting legend on the outside of the plot for now because it's really long
    box = ax0.get_position()
    ax0.set_position([box.x0, box.y0, box.width * 0.5, box.height])
    ax0.legend(loc='upper left', bbox_to_anchor=(1, 1), ncol=2, shadow=False,)
    box2 = ax1.get_position()
    ax1.set_position([box2.x0, box2.y0, box2.width * 0.5, box2.height])
    ax1.legend(loc='upper left', bbox_to_anchor=(1, 1), ncol=2, shadow=False,)

    ax0.set_ylabel("gas-phase mole fraction", fontsize=14)
    ax0.set_ylim(y_min, 1.)

    # ax0.set_xlabel("Time(s)", fontsize=20)
    ax1.set_ylabel("surface site fraction", fontsize=14)
    #ax0.xaxis.set_major_locator(MaxNLocator(6))
    #ax0.yaxis.set_major_locator(LogLocator(base=10.0, numticks=3))
    #ax0.tick_params(axis='both', which='major', labelsize=10)
    out_dir = 'figures'
    os.path.exists(out_dir) or os.makedirs(out_dir)
    ax1.set_xlabel("Time(s)", fontsize=14)
    if log is True:
        fig.savefig(out_dir + '/batch-log.pdf', bbox_inches='tight')
    else:
        fig.savefig(out_dir + '/batch.pdf', bbox_inches='tight')
    plt.close()

#######################################################################
# Input Parameters
#######################################################################

t_in = 423.15  # K, uniform temperature profile
gas_names = gas.species_names
surf_names = surf.species_names

p = 35  # bar or 3.5 MPa
pressure = p * 1e5  # Pa
volume = 0.3e-3  # m^3

f_ethylene = 2
f_nheptane = 1
ratio_in = [f_ethylene, f_nheptane]
print('Starting model simulation')
a = semibatch(gas, surf, t_in, pressure, volume, ratio_in, verbose=True)
print('Finished model simulation')
gas_mole_fracs, surf_site_fracs, rxn_time, pressure1, overall_fluxes = a
print(fluxes)
plot(a, log=True)
plot(a)

plt.semilogx(rxn_time, pressure1)
plt.xlabel("Time (s)")
plt.ylabel("Pressure (MPa)")
plt.savefig('pressure.pdf')

# def make_dot(overall_fluxes):
remove_later = []  # all species should go from left to right
remove_now = []  # remove any fluxes of 0

for flux in overall_fluxes:
    if overall_fluxes[flux] < 0.:
        remove_later.append(flux)
    if overall_fluxes[flux] == 0.:
        remove_now.append(flux)

for flux in remove_now:
    del overall_fluxes[flux]

for flux in remove_later:
    s1,s2 = flux.split()
    new_key = s2 + ' ' + s1
    overall_fluxes[new_key] = overall_fluxes[flux] * -1.
    del overall_fluxes[flux]

# scale line width from largest flux
largest_flux = max(overall_fluxes.values())
smallest_flux = min(overall_fluxes.values())

overall_fluxes.update((x, y / largest_flux) for x, y in overall_fluxes.items())

# sanity check that 1.0 is the largest value now
assert 1.0 == max(overall_fluxes.values())

s_list = [i for i in range(55)]
s_list = ['s' + str(num) for num in s_list]
s_dict = dict(zip(names.values(),s_list))

s_dict_inv = {v: k for k, v in s_dict.items()}

## change input name of overall_fluxes to generalize

cutoff = 1e-12

# start making the dot now
list_of_strings = ['digraph reaction_paths {','center=1;']

for flux in overall_fluxes:
    s1, s2 = flux.split()
    if overall_fluxes[flux] <= cutoff:
        pass
    else:
        width = (overall_fluxes[flux] * 4.) + 2
        label = '{:0.3e}'.format(overall_fluxes[flux])
        str_to_add = s_dict[s1] + ' -> ' + s_dict[s2] + '[fontname="Helvetica", penwidth=' + str(width) + ', arrowsize=' + \
        str(width / 2.) + ', label="' + str(label) + '"];'
        list_of_strings.append(str_to_add)

# don't print species that don't appear in the network
species_to_print = []
for s in s_list:
    for l in list_of_strings:
        if re.search(s, l):
            species_to_print.append(s)
species_to_print = set(species_to_print)

for s in species_to_print:  # writing the species translations
    str_to_add = s + ' [ fontname="Helvetica", shape=box, label="' + s_dict_inv[s] + '"];'
    list_of_strings.append(str_to_add)

scale = '{:0.3e}'.format(largest_flux)
list_of_strings.append(' label = "Scale = ' + str(scale) + '\l Hrxn path";')
list_of_strings.append(' fontname = "Helvetica";')
list_of_strings.append('}')

with open("overall_rxn_diagram.dot",'w') as f:
    for x in list_of_strings:
        f.write('{}\n'.format(x))
